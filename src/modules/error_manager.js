const Discord = require('discord.js');
const constants = require('./constants.js');
const classes = require('./classes.js');
/** @type {import('./app.js')} */
let app;
/** @type {import('./message_manager.js')} */
let message_manager;

const MarkManager = new classes.Manager();
let threshold_hit_count = 0;
let threshold_reached = false;
/** @type {Array<classes.ErrorTicket>} */
const errors_per_minute = new Array();

/**
 * Initializes the module.
 * @param {import('discord.js-commando').CommandoClient} ClientInstance The Commando Client instance used to login.
 */
module.exports.initialize = (ClientInstance) => {
	// Link
	app = ClientInstance.modules.app;
	message_manager = ClientInstance.modules.message_manager;
};

/**
 *  Marks the error and documents it.
 * @param {classes.ErrorTicket} ErrorTicket The Error Ticket that was generated by the Error Ticket Manager.
 */
module.exports.mark = async (ErrorTicket) => {
	console.log(`ErrorManager: Queueing ${MarkManager.totalID} (${ErrorTicket.location} / ${ErrorTicket.name} - ${ErrorTicket.error})`);
	await MarkManager.queue(async function() {
		try {
			if (app.isInitialized()) throw new Error('App not initialized');

			errors_per_minute.push(ErrorTicket);
			setTimeout(() => {
				errors_per_minute.shift();
				if (errors_per_minute.length == 0) threshold_reached = false;
			}, 60000);

			const epm = errors_per_minute.length;

			if ((epm > 5 || (ErrorTicket.error.code != null && ErrorTicket.error.code == '500')) && !threshold_reached) {
				// Change bot presence
				app.setActivity(`SERVER RESTART (${++threshold_hit_count})`, 'WATCHING');

				// Notify staffs
				message_manager.sendToChannel(constants.channels.server.management, 'I\'m currently detecting issues with Discord; some functionalities are disabled. A bot restart is recommended once the issues are resolved.').catch(async () => {
					const embed = new Discord.MessageEmbed();
					embed.setAuthor('Limited Functionality');
					embed.setTitle('Issues with Discord');
					embed.setDescription('I\'m currently detecting issues with Discord; some functionalities are disabled. A bot restart is recommended once the issues are resolved.');
					embed.setColor('ffe300');
					message_manager.sendToChannel(constants.channels.server.management, embed);
				});
				threshold_reached = true;
			}

			const embed = new Discord.MessageEmbed();
			embed.setAuthor('Quarantine Gaming: Telemetry');
			embed.setTitle('Exception Details');
			if (ErrorTicket.error) embed.setDescription(ErrorTicket.error);
			if (ErrorTicket.name) embed.addField('Method', ErrorTicket.name, true);
			if (ErrorTicket.location) embed.addField('Location', ErrorTicket.location, true);
			if (ErrorTicket.error.code) embed.addField('Error Code', ErrorTicket.error.code, true);
			embed.setFooter(`EPM: ${epm}\t | \tTH: ${threshold_reached ? 'True' : 'False'}\t | \tTHC: ${threshold_hit_count}`);
			embed.setThumbnail('https://mir-s3-cdn-cf.behance.net/project_modules/disp/c9955d46715833.589222657aded.png');
			embed.setTimestamp();
			embed.setColor('#FF0000');
			message_manager.sendToChannel(constants.channels.qg.logs, embed);
		}
		catch (error) {
			console.log(`ErrorManager: Failed with error (${error})`);
		}
		finally {
			console.log(`ErrorManager: Finished ${MarkManager.currentID}`);
		}
	});
};

module.exports.MarkManager = MarkManager;